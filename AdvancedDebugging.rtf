{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww33100\viewh20700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Advanced Debugging with Xcode and LLDB\
\
Fav Debugging Tips and Tricks:\
	1) In the lldb menu\
		A) you can type \'93po\'94  with an variable name to see the value\
		B) you can use the \'93expression\'94 command to use the debugger to set the variable value\
		C) You can use the \'93po\'94 command to gain the value from the pseudo registers while it is going through the Assembly Code with the \'93$arg1\'94 command for instance for the first pseudo register\
		D) You can typecast the pseudo register with a \'93(SEL)\'94 preceding the \'93$arg1\'94 with no spaces\
		E) You can instead of typing \'93po\'94 with a variable name, you could use \'93p\'94 with an object name and it will return more information including the memory address and variables within the object\
		F) You can also a command with \'93po\'94 such as \'93self.view.recursiveDescription()\'94 to see recursive data\
	2) Can right click on the break point to select Edit Breakpoint\'85 and this will give a popup menu that will allow you to click the Action dropdown to access Debugger Command\
		A) Inside here it will allow you to reuse the \'93expression\'94 command as noted above which will execute each time breakpoint is accessed\
		B) You can also set a one-shot breakpoint by entering in the debugger command field the keyword \'93breakpoint set \'97one-shot true\'94 which only exists until the first time it is triggered\
		C) You can also use the Debugger Command to advance the executed thread by 1 with a command \'93thread jump \'97by 1\'94\
	3) On the left side you can click a blue debug block to setup a Symbolic Breakpoint\
	4) If you want to skip a statement of code you can drag the GREEN 3-LINE bar to where the code will continue to debug from\
	5) Can pause when variable are modified by using watchpoints\
	6) Can evaluate Obj-C code in Swift frames with \'93expression -l objc -O \'97 <expr>\'94\
	7) Can flush view changes to the screen using \'93expression CATransaction.flush()\'94\
	8) Can add custom lldb commands using aliases and scripts.\
		A) command alias poc expression -l objc -O \'97\
		B) command alias flush expression -l objc \'97 (void)[CATransaction flush\
	9) These are several of the LLDB print commands\
		A) po <expression>\
		B) p <expression>\
		C) frame variable <name> whereas <name> is the name of the object/variable\
\
\
\
\
		}