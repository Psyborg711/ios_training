{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
\f3\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red31\green31\blue31;\red255\green255\blue255;\red44\green44\blue44;
\red27\green31\blue34;}
{\*\expandedcolortbl;;\cssrgb\c16078\c16078\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c22745\c22745\c22745;
\cssrgb\c14118\c16078\c18039;}
\margl1440\margr1440\vieww14520\viewh11200\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs36 \cf0 WEEK 4 EXAM
\f1\b0 \
\
Answer the given questions below in a short answer format.\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf0 \expnd0\expndtw0\kerning0
\
\
\
1. Explain what is a protocol and why do we use them?\
A group or set of rules that allow transfer of data between hardware.  For instance the SSH protocol.\
\
2. What is a REST-api?\
REST stands for Representational State Transfer which in essence means a group of constraints that call forth a specific accountable (hence Representational) dataset return. \
\
3. How do we get data from it?\
Depending on the transferred datatype which could be: HTTP, JSON, XLT, etc a parsing procedure must be called for instance if a JSON is returned you could parse it with either Coder/Decoder or JSON Serialization.\
\
4. What are the different ways we can handle multithreading in iOS?\
GCD (Grand Central Dispatch) through the use of Ques and Deques statements, there are two types of Ques: Serial and Concurrent both of these allow transfer of code blocks to other threads for delivery.  Another handler would be Operations and OperationQueues.  Operations are ran as soon as they are placed in the OperationQueues. \
\
5. What is Core Data?\
One of the persistent data solutions available.  It allows the developer to utilize  Relational database-like full access to data using SQLite\
\
6. What are other ways that you have used Data Persistency?\
UserGroups but they are very limited on usage as any data usage over say 100kb begins to slow down the running application\
\
7. How do you make CoreData Thread Safe?\
Make certain that the object contexts are bound to the queue upon initialization and also make sure that the inbound contexts are bound to the same queue\
\
8. What are the different ways we can unwrap an optional?\
Forced comes to mind but it is unsafe to use in most scenarios.  Also another method is to Implicitly unwrap but it is also unsafe in most cases.  Optional binding is considered a safe method.  Optional chaining is also considered safe.  Use of a Nil coalescing operator is yet another considered safe method.  The use of optional patterns is also safe.  The user of a guard statement is also another safe recommendation.  \
\
9. How would you go about creating your own data structure to take the place of an optionals if they didn\'92t already exist in Swift?\
I could declared a string variable and set it\'92s initial value to Nil\
\
9. What is a retain cycle? How do we avoid them?\
When a child retains the parent object and the parent object also retains the child object.  To avoid this try never to have the child retain the parent object, as a solution you could simply use a Weak reference back to the parent object as needed.\
\
10. How are dispatch groups implemented?\
By combining several queues into a asynchronous dispatch queue.\
\
11. What is Autolayout?\
It is a dynamic programmatically called layout that has allowed developers to switch from a more tedious layout constraints such as the use of calculating the frames ourselves or utilizing the GUI aspect through the Interface B builder.\
\
12. What is a closure? What is the difference between an escaping and non-escaping closure?\
Closures are in essence self-contained blocks of functionality that can be passed around.  Closures allow the capture of constants and variables through stored references.  Non escaping closures are the norm within calling functions.  Escaping closure\'92s memory remains after function call commits.  One example of Escaping closure would be the use of API calls.\
\
13. 
\f1\fs28 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \cb3 What are lazy properties, how do they work?\
The value of a lazy property isn\'92t called until the first time it is used.  Its primary strength is that it is designed to run more infrequently and thusly could save on costly processor cycles.  Such as building a dictionary array that readily performs functions like add and remove users but rarely does it call the function to determine the eldest person in employ.\
\
14. What are property observers?\
Property observers are there to keep track of changes in values of objects/variables.  For instance a historical record of current favorite restaurant for given Locale.\
\
15. What\'92s the application and controller lifecycle?\
The following 2 methods at least:  viewWillAppear(), viewDidAppear().  There are many more interesting load methods such as: loadView(), viewDidLoad(), viewWillLayoutSubviews(), viewDidLayoutSubviews(), viewWillDisappear(), and viewDidDisappear().  \
\
16. How would you store sensitive user data?\
One viable option would be to store in a keychain.\
\
17. \AppleTypeServices \cf4 What is a Guard statement?\
It\'92s a conditional statement while assigning value to variables/objects that prevents crashing and incorrect data\
\
18. \cf5 What is a 
\f3\i Serial Queue
\f1\i0 ?\
It is a queue that is executed one task at a time even though the tasks may change per iteration of the serial queue\cf4 \
\
19. What is the difference between strong, weak, & unowned? When do we use them?\
The main difference between these is the ARC which determines when classes are deallocated, does not take into account weak or unowned references to said class but the strong reference even one will prevent the deallocation of the class.  Weak references get set to nil on occasion from the ARC and as such need always to be declared as a optional variable.  The unowned reference always expected to point to a class instance, be warned if an unowned reference is called which is pointing to deallocated class than it will certainly cause system crashes.\
\
20. 
\f2\fs32 \cf0 \cb1  How do we create Singletons in Swift?\
Through instantiation in a variable for instance:  let sharedURLSession = URLSession.shared\
}